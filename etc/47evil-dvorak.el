
(defvar evil-use-dvorak-on-insert nil
  "use dvorak keymap on insert mode.")

(setq evil-replace-key-sequences "qwertyuiopQWERTYUIOPsdfghjkl;SDFGHJKL:zxcvbn,./ZXCVBN<>?[{-_")

(defun dvorak ()
  "Turn Dvorak keyboard on."
  (interactive)
  (message "use Dvorak layout")
  (mapcar
    (lambda (c) (define-key evil-insert-state-map (char-to-string c) 'dvorak-insert))
    evil-replace-key-sequences))

(defun qwerty ()
  "use qwerty layout."
  (interactive))

(defun dvorak-insert ()
  (interactive)
  "Translate typed key into Dvorak keyboard."
    (cond
     ((= last-command-char ?m)  (insert "a"))
     ((= last-command-char ?q)  (insert "'"))
     ((= last-command-char ?w)  (insert ","))
     ((= last-command-char ?e)  (insert "b"))
     ((= last-command-char ?r)  (insert "p"))
     ((= last-command-char ?t)  (insert "y"))
     ((= last-command-char ?y)  (insert "f"))
     ((= last-command-char ?u)  (insert "g"))
     ((= last-command-char ?i)  (insert "c"))
     ((= last-command-char ?o)  (insert "r"))
     ((= last-command-char ?p)  (insert "s"))
     ((= last-command-char ?Q)  (insert "\""))
     ((= last-command-char ?W)  (insert "<"))
     ((= last-command-char ?E)  (insert "B"))
     ((= last-command-char ?R)  (insert "P"))
     ((= last-command-char ?T)  (insert "Y"))
     ((= last-command-char ?Y)  (insert "F"))
     ((= last-command-char ?U)  (insert "S"))
     ((= last-command-char ?I)  (insert "C"))
     ((= last-command-char ?O)  (insert "R"))
     ((= last-command-char ?P)  (insert "S"))
     ((= last-command-char ?s)  (insert "o"))
     ((= last-command-char ?d)  (insert "e"))
     ((= last-command-char ?f)  (insert "u"))
     ((= last-command-char ?g)  (insert "i"))
     ((= last-command-char ?h)  (insert "d"))
     ((= last-command-char ?j)  (insert "h"))
     ((= last-command-char ?k)  (insert "t"))
     ((= last-command-char ?l)  (insert "n"))
     ;; ((= last-command-char ?\;) (insert "s"))
     ((= last-command-char ?S)  (insert "O"))
     ((= last-command-char ?D)  (insert "E"))
     ((= last-command-char ?F)  (insert "U"))
     ((= last-command-char ?G)  (insert "I"))
     ((= last-command-char ?H)  (insert "D"))
     ((= last-command-char ?J)  (insert "H"))
     ((= last-command-char ?K)  (insert "T"))
     ((= last-command-char ?L)  (insert "N"))
     ;; ((= last-command-char ?:)  (insert "S"))
     ;; ((= last-command-char ?z)  (insert "."))
     ((= last-command-char ?x)  (insert "q"))
     ((= last-command-char ?c)  (insert "j"))
     ((= last-command-char ?v)  (insert "k"))
     ((= last-command-char ?b)  (insert "x"))
     ((= last-command-char ?n)  (insert "l"))
     ((= last-command-char ?\,) (insert "w"))
     ((= last-command-char ?\.) (insert "v"))
     ((= last-command-char ?/)  (insert "."))
     ;; ((= last-command-char ?Z)  (insert ">"))
     ((= last-command-char ?X)  (insert "Q"))
     ((= last-command-char ?C)  (insert "J"))
     ((= last-command-char ?V)  (insert "K"))
     ((= last-command-char ?B)  (insert "X"))
     ((= last-command-char ?N)  (insert "L"))
     ((= last-command-char ?<)  (insert "W"))
     ((= last-command-char ?>)  (insert "V"))
     ((= last-command-char ??)  (insert ">"))
     ((= last-command-char ?\') (insert "/"))
     ((= last-command-char ?\") (insert "?"))
     ;; ((= last-command-char ?[)  (insert "/"))
     ;; ((= last-command-char ?{)  (insert "?"))
     ;; ((= last-command-char ?-)  (insert "["))
     ;; ((= last-command-char ?_)  (insert "{"))

     (t (insert (char-to-string last-command-char)))
      ))